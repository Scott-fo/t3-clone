# Name of your application. Used to uniquely configure containers.
service: my-app

# Name of the container image.
image: my-user/my-app

# Deploy to these servers.
servers:
  web:
    - 192.168.0.1

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  server: ghcr.io
  username: my-user

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  secrets:
    - REPLICACHE_KEY

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
 clear:
   APP_APPLICATION__REDIS_URL: "redis://my-app-redis:6379"
   APP_APPLICATION__DATABASE_URL: "mysql://root:${MYSQL_ROOT_PASSWORD}@my-app-db:3306/my_app_production"
   APP_ENVIRONMENT: production
 secret:
   - APP_APPLICATION__SECRET
   - MYSQL_ROOT_PASSWORD


# Use accessory services (secrets come from .kamal/secrets).
accessories:
 db:
   image: mysql:8.0
   env:
     clear:
       MYSQL_ROOT_HOST: '%'
       MYSQL_DATABASE: "my_app_production"
     secret:
       - MYSQL_ROOT_PASSWORD
   files:
     - config/mysql/production.cnf:/etc/mysql/my.cnf
     - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
   directories:
     - data:/var/lib/mysql
 redis:
   image: valkey/valkey:8
   directories:
     - data:/data
